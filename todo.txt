##Correction 11 jul 2025##
Hide/show the text box DONE
make the pop up DONE
add numbers to each letter DONE
and also add line break DONE
here change color is for changing the color when its pressed once


// Example letterTraits data for demo
const letterTraits = {
  a: [
    {
      explanation: "Trait explanation for small a",
      imagePath: "both gaps r.png"
    }
  ],
  A: [
    {
      explanation: "Trait explanation for capital A",
      imagePath: "angle d capital d.png"
    }
  ]
};

// Helper function to build image URLs based on letter case
function getImageUrl(letter, imageFileName) {
  const baseURL = "http://localhost/Task%20Manager/Clients/Sushant/Graphology/Graphology/";
  const folder = (letter === letter.toUpperCase()) ? "CapitalLetters/" : "letters/";
  return baseURL + folder + encodeURIComponent(imageFileName);
}

// Modal traits container
const traitsContainer = document.getElementById("traitsContainer");

// Clear container before filling
traitsContainer.innerHTML = "";

// Create letter sections and buttons with images
for (const letter in letterTraits) {
  const section = document.createElement("div");
  section.className = "letter-section";

  const heading = document.createElement("h3");
  const label = letter === letter.toUpperCase() ? "LETTER" : "Letter";
  heading.textContent = `${label} ${letter.toUpperCase()}`;
  section.appendChild(heading);

  letterTraits[letter].forEach((traitObj, index) => {
    const btnWrapper = document.createElement("div");
    btnWrapper.className = "trait-button-wrapper";

    const btn = document.createElement("button");
    btn.textContent = `Trait ${index + 1}`;

    btn.onclick = () => {
      if (btn.disabled) return;
      addText(traitObj, letter.toUpperCase(), index + 1);
      btn.style.backgroundColor = "red";
      btn.style.cursor = "not-allowed";
      btn.disabled = true;
    };

    btnWrapper.appendChild(btn);

    if (traitObj.imagePath) {
      const img = document.createElement("img");
      img.src = getImageUrl(letter, traitObj.imagePath);
      img.alt = `Trait ${index + 1} image`;
      img.className = "trait-button-image";
      btnWrapper.appendChild(img);
    }

    section.appendChild(btnWrapper);
  });

  traitsContainer.appendChild(section);
}

// Add text to output box (without images)
function addText(traitObj, letter, number) {
  const output = document.getElementById('output');

  const traitContainer = document.createElement('div');
  traitContainer.className = 'trait-container';

  const textElement = document.createElement('span');
  const subscript = `<sub>${letter}${number}</sub>`;
  textElement.innerHTML = `${traitObj.explanation} ${subscript}`;

  traitContainer.appendChild(textElement);
  traitContainer.appendChild(document.createElement('br'));

  if (output.innerHTML.trim()) {
    output.appendChild(document.createElement('br'));
    output.appendChild(document.createElement('br'));
  }
  output.appendChild(traitContainer);
}

// Modal open/close functions (your existing code)
function openModal() {
  document.getElementById("traitsModal").style.display = "block";
}
function closeModal() {
  document.getElementById("traitsModal").style.display = "none";
}
window.onclick = function(event) {
  const modal = document.getElementById("traitsModal");
  if (event.target == modal) {
    modal.style.display = "none";
  }
};

// Toggle output visibility (your existing code)
function toggleOutput() {
  const output = document.getElementById("output");
  const toggleBtn = document.getElementById("toggleBtn");

  if (output.style.display === "none") {
    output.style.display = "block";
    toggleBtn.textContent = "Hide Paragraph";
  } else {
    output.style.display = "none";
    toggleBtn.textContent = "Show Paragraph";
  }
}

// Download output text as .txt (your existing code)
function downloadText() {
  const text = document.getElementById('output').innerText;
  const blob = new Blob([text], { type: "text/plain" });
  const link = document.createElement("a");
  link.download = "graphology_paragraph.txt";
  link.href = window.URL.createObjectURL(blob);
  link.click();
}
